package dev._2lstudios.exploitfixer;

import java.io.File;
import java.io.IOException;
import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.plugin.InvalidDescriptionException;
import org.bukkit.plugin.InvalidPluginException;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.UnknownDependencyException;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.commands.ExploitFixerCommand;
import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.listener.ListenerInitializer;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.tasks.ExploitFixerRepeatingTask;
import dev._2lstudios.exploitfixer.utils.ConfigUtil;
import dev._2lstudios.exploitfixer.utils.PluginDownloader;

public class ExploitFixer extends JavaPlugin {
	private static ExploitFixer instance;
	private ConfigUtil configUtil;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	public static synchronized ExploitFixer getInstance() {
		return instance;
	}

	public static synchronized void setInstance(ExploitFixer exploitFixer) {
		ExploitFixer.instance = exploitFixer;
	}

	@Override
	public void onEnable() {
		setInstance(this);

		new PluginDownloader().enablePlugin("HamsterAPI");

		if (!checkHamsterAPI()) {
			try {
				getLogger().info("Downloading HamsterAPI...");
				downloadHamsterAPI();
				getLogger().info("Downloaded HamsterAPI!");
			} catch (Exception ex) {
				throw new IllegalStateException(
						"ExploitFixer requires HamsterAPI to listen to packets and block exploits! Download: https://www.spigotmc.org/resources/78831/");
			}
		}

		configUtil = new ConfigUtil(this);

		createConfigurations();

		IConfiguration configYml = configUtil.get("%datafolder%/config.yml");

		moduleManager = new ModuleManager(configUtil, this);
		moduleManager.reload(configYml);
		listenerInitializer = new ListenerInitializer(this, moduleManager);

		register();
	}

	private void downloadHamsterAPI() throws IOException, UnknownDependencyException, InvalidPluginException, InvalidDescriptionException {
		PluginDownloader pm = new PluginDownloader();
		File file = pm.downloadPlugin(
				"https://github.com/2lstudios-mc/HamsterAPI/releases/download/0.2.4/HamsterAPI.jar",
				getDataFolder().getParentFile().getAbsolutePath());
		Plugin plugin = pm.loadPlugin(file, this);
		pm.enablePlugin(plugin);
	}

	@Override
	public void onDisable() {
		unregister();
	}

	public void reload() {
		createConfigurations();

		IConfiguration configYml = configUtil.get("%datafolder%/config.yml");

		moduleManager.reload(configYml);

		unregister();
		register();
	}

	private boolean checkHamsterAPI() {
		Server server = this.getServer();
		PluginManager pluginManager = server.getPluginManager();

		return pluginManager.isPluginEnabled("HamsterAPI");
	}

	private void createConfigurations() {
		configUtil.create("%datafolder%/config.yml", "config.yml");
	}

	public void unregister() {
		Server server = this.getServer();
		BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);
		server.getMessenger().unregisterIncomingPluginChannel(this);

		if (this.listenerInitializer != null) {
			this.listenerInitializer.unregister();
		}
	}

	private void register() {
		Server server = this.getServer();
		BukkitScheduler scheduler = server.getScheduler();
		Logger logger = this.getLogger();

		getCommand("exploitfixer").setExecutor(new ExploitFixerCommand(this, moduleManager));

		logger.info("Successfully registered commands!");

		if (this.listenerInitializer.isRegistered()) {
			this.listenerInitializer.unregister();
		}

		this.listenerInitializer.register();

		logger.info("Successfully registered listeners!");
		logger.info("Successfully hooked with HamsterAPI!");

		scheduler.runTaskTimerAsynchronously(this,
				new ExploitFixerRepeatingTask(moduleManager), 20L, 20L);

		logger.info("Successfully registered tasks!");
	}
}